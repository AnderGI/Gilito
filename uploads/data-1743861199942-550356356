Para agregar un **timestamp** al nombre del archivo, puedes modificar la función `filename` en `multer.diskStorage()`.  

---

## ✅ **Solución: Nombre con Timestamp**
```typescript
import multer from 'multer';
import path from 'path';

const storage = multer.diskStorage({
	destination: 'uploads/',
	filename: (req, file, cb) => {
		// Obtener el timestamp actual
		const timestamp = Date.now();

		// Reemplazar espacios por guiones bajos en el nombre original
		const sanitizedFilename = file.originalname.replace(/\s+/g, '_');

		// Obtener la extensión del archivo
		const ext = path.extname(sanitizedFilename);

		// Construir el nuevo nombre con timestamp
		const newFilename = `${path.basename(sanitizedFilename, ext)}_${timestamp}${ext}`;

		cb(null, newFilename);
	}
});

const upload = multer({
	storage,
	fileFilter: (req, file, cb) => {
		const allowedMimeTypes = ['text/plain', 'application/pdf'];
		if (!allowedMimeTypes.includes(file.mimetype)) {
			return cb(new Error('Invalid file type. Only .txt and .pdf are allowed.'));
		}
		cb(null, true);
	}
});
```

---

## 📌 **Explicación**
1️⃣ **`Date.now()`** obtiene el timestamp en milisegundos.  
2️⃣ **Reemplaza espacios por `_`** en el nombre original.  
3️⃣ **Usa `path.extname()` y `path.basename()`** para conservar la extensión original.  
4️⃣ **Concatena el timestamp al final del nombre**.  

---

## 🔥 **Ejemplo**
Si el usuario sube un archivo llamado:
```
"My document final version.txt"
```
📌 Se guardará como:
```
My_document_final_version_1711583212345.txt
```
*(donde `1711583212345` es el timestamp en milisegundos).*

---

## ✅ **Comprobación**
Prueba subir archivos con `curl`:
```sh
curl -X PUT -F "knowledge=@'My document final version.txt'" http://localhost:3000/knowledge/550e8400-e29b-41d4-a716-446655440000
```
Luego revisa la carpeta `uploads/` y verás que el archivo tiene el timestamp en su nombre. 🚀